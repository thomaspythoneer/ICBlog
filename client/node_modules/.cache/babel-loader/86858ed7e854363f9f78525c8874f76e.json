{"ast":null,"code":"import axios from 'axios';\nimport { API_NOTIFICATION_MESSAGES, SERVICE_URLS } from '../constants/config';\nimport { getAccessToken, getRefreshToken, setAccessToken, getType } from '../utils/common-utils';\nconst API_URL = 'http://localhost:8000';\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  timeout: 10000,\n  headers: {\n    \"content-type\": \"application/json\"\n  }\n});\naxiosInstance.interceptors.request.use(function (config) {\n  if (config.TYPE.params) {\n    config.params = config.TYPE.params;\n  } else if (config.TYPE.query) {\n    config.url = config.url + '/' + config.TYPE.query;\n  }\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(function (response) {\n  // Stop global loader here\n  return processResponse(response);\n}, function (error) {\n  // Stop global loader here\n  return Promise.reject(ProcessError(error));\n});\n\n///////////////////////////////\n// If success -> returns { isSuccess: true, data: object }\n// If fail -> returns { isFailure: true, status: string, msg: string, code: int }\n//////////////////////////////\nconst processResponse = response => {\n  if ((response === null || response === void 0 ? void 0 : response.status) === 200) {\n    return {\n      isSuccess: true,\n      data: response.data\n    };\n  } else {\n    return {\n      isFailure: true,\n      status: response === null || response === void 0 ? void 0 : response.status,\n      msg: response === null || response === void 0 ? void 0 : response.msg,\n      code: response === null || response === void 0 ? void 0 : response.code\n    };\n  }\n};\n\n///////////////////////////////\n// If success -> returns { isSuccess: true, data: object }\n// If fail -> returns { isError: true, status: string, msg: string, code: int }\n//////////////////////////////\nconst ProcessError = async error => {\n  if (error.response) {\n    var _error$response;\n    // Request made and server responded with a status code \n    // that falls out of the range of 2xx\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 403) {\n      // const { url, config } = error.response;\n      // console.log(error);\n      // try {\n      //     let response = await API.getRefreshToken({ token: getRefreshToken() });\n      //     if (response.isSuccess) {\n      sessionStorage.clear();\n      //         setAccessToken(response.data.accessToken);\n\n      //         const requestData = error.toJSON();\n\n      //         let response1 = await axios({\n      //             method: requestData.config.method,\n      //             url: requestData.config.baseURL + requestData.config.url,\n      //             headers: { \"content-type\": \"application/json\", \"authorization\": getAccessToken() },\n      //             params: requestData.config.params\n      //         });\n      //     }\n      // } catch (error) {\n      //     return Promise.reject(error)\n      // }\n    } else {\n      console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n      return {\n        isError: true,\n        msg: API_NOTIFICATION_MESSAGES.responseFailure,\n        code: error.response.status\n      };\n    }\n  } else if (error.request) {\n    // The request was made but no response was received\n    console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.requestFailure,\n      code: \"\"\n    };\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.networkError,\n      code: \"\"\n    };\n  }\n};\n_c = ProcessError;\nconst API = {};\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\n  API[key] = (body, showUploadProgress, showDownloadProgress) => axiosInstance({\n    method: value.method,\n    url: value.url,\n    data: value.method === 'DELETE' ? '' : body,\n    responseType: value.responseType,\n    headers: {\n      authorization: getAccessToken()\n    },\n    TYPE: getType(value, body),\n    onUploadProgress: function (progressEvent) {\n      if (showUploadProgress) {\n        let percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        showUploadProgress(percentCompleted);\n      }\n    },\n    onDownloadProgress: function (progressEvent) {\n      if (showDownloadProgress) {\n        let percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        showDownloadProgress(percentCompleted);\n      }\n    }\n  });\n}\nexport { API };\nvar _c;\n$RefreshReg$(_c, \"ProcessError\");","map":{"version":3,"names":["axios","API_NOTIFICATION_MESSAGES","SERVICE_URLS","getAccessToken","getRefreshToken","setAccessToken","getType","API_URL","axiosInstance","create","baseURL","timeout","headers","interceptors","request","use","config","TYPE","params","query","url","error","Promise","reject","response","processResponse","ProcessError","status","isSuccess","data","isFailure","msg","code","_error$response","sessionStorage","clear","console","log","toJSON","isError","responseFailure","requestFailure","networkError","_c","API","key","value","Object","entries","body","showUploadProgress","showDownloadProgress","method","responseType","authorization","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","onDownloadProgress","$RefreshReg$"],"sources":["/home/thomvs/MERN_BLOG/client/src/service/api.js"],"sourcesContent":["import axios from 'axios';\n\nimport { API_NOTIFICATION_MESSAGES, SERVICE_URLS } from '../constants/config';\nimport { getAccessToken, getRefreshToken, setAccessToken, getType } from '../utils/common-utils';\n\nconst API_URL = 'http://localhost:8000';\n\nconst axiosInstance = axios.create({\n    baseURL: API_URL,\n    timeout: 10000, \n    headers: {\n        \"content-type\": \"application/json\"\n    }\n});\n\naxiosInstance.interceptors.request.use(\n    function(config) {\n        if (config.TYPE.params) {\n            config.params = config.TYPE.params\n        } else if (config.TYPE.query) {\n            config.url = config.url + '/' + config.TYPE.query;\n        }\n        return config;\n    },\n    function(error) {\n        return Promise.reject(error);\n    }\n);\n\naxiosInstance.interceptors.response.use(\n    function(response) {\n        // Stop global loader here\n        return processResponse(response);\n    },\n    function(error) {\n        // Stop global loader here\n        return Promise.reject(ProcessError(error));\n    }\n)\n\n///////////////////////////////\n// If success -> returns { isSuccess: true, data: object }\n// If fail -> returns { isFailure: true, status: string, msg: string, code: int }\n//////////////////////////////\nconst processResponse = (response) => {\n    if (response?.status === 200) {\n        return { isSuccess: true, data: response.data }\n    } else {\n        return {\n            isFailure: true,\n            status: response?.status,\n            msg: response?.msg,\n            code: response?.code\n        }\n    }\n}\n\n///////////////////////////////\n// If success -> returns { isSuccess: true, data: object }\n// If fail -> returns { isError: true, status: string, msg: string, code: int }\n//////////////////////////////\nconst ProcessError = async (error) => {\n    if (error.response) {\n        // Request made and server responded with a status code \n        // that falls out of the range of 2xx\n        if (error.response?.status === 403) {\n            // const { url, config } = error.response;\n            // console.log(error);\n            // try {\n            //     let response = await API.getRefreshToken({ token: getRefreshToken() });\n            //     if (response.isSuccess) {\n                    sessionStorage.clear();\n            //         setAccessToken(response.data.accessToken);\n\n            //         const requestData = error.toJSON();\n\n            //         let response1 = await axios({\n            //             method: requestData.config.method,\n            //             url: requestData.config.baseURL + requestData.config.url,\n            //             headers: { \"content-type\": \"application/json\", \"authorization\": getAccessToken() },\n            //             params: requestData.config.params\n            //         });\n            //     }\n            // } catch (error) {\n            //     return Promise.reject(error)\n            // }\n        } else {\n            console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n            return {\n                isError: true,\n                msg: API_NOTIFICATION_MESSAGES.responseFailure,\n                code: error.response.status\n            }\n        }\n    } else if (error.request) { \n        // The request was made but no response was received\n        console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n        return {\n            isError: true,\n            msg: API_NOTIFICATION_MESSAGES.requestFailure,\n            code: \"\"\n        }\n    } else { \n        // Something happened in setting up the request that triggered an Error\n        console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n        return {\n            isError: true,\n            msg: API_NOTIFICATION_MESSAGES.networkError,\n            code: \"\"\n        }\n    }\n}\n\nconst API = {};\n\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\n    API[key] = (body, showUploadProgress, showDownloadProgress) =>\n        axiosInstance({\n            method: value.method,\n            url: value.url,\n            data: value.method === 'DELETE' ? '' : body,\n            responseType: value.responseType,\n            headers: {\n                authorization: getAccessToken(),\n            },\n            TYPE: getType(value, body),\n            onUploadProgress: function(progressEvent) {\n                if (showUploadProgress) {\n                    let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n                    showUploadProgress(percentCompleted);\n                }\n            },\n            onDownloadProgress: function(progressEvent) {\n                if (showDownloadProgress) {\n                    let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n                    showDownloadProgress(percentCompleted);\n                }\n            }\n        });\n}\n\nexport { API };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}